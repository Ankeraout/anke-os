#!/usr/bin/python3

from typing import Any
from typing import Dict
from typing import List

import sys

# ===== DEFAULT PARAMETER VALUES ==============================================
DEFAULT_TARGET: str = 'x86-elf-multiboot'

# ===== PROGRAM ===============================================================
def parseCommandArguments(programSettings: Dict[str, Any]) -> None:
    '''Summary:
        Parses the command-line arguments and sets the program settings
        accordingly.

    Args:
        - programSettings: The program settings object.

    Exceptions:
        - Exception if an error is detected in the command-line arguments.
    '''

    parsingFlagList: List[str] = [
        'target'
    ]

    parsingFlags: Dict[str, bool] = dict()

    for parsingFlag in parsingFlagList:
        parsingFlags[parsingFlag] = False

    for arg in sys.argv[1:]:
        if parsingFlags['target']:
            programSettings['target'] = arg
            parsingFlags['target'] = False

        else:
            if arg == '--target':
                parsingFlags['target'] = True

            else:
                raise Exception('Unknown argument "{}".'.format(arg))
    
    for parsingFlag in parsingFlagList:
        if parsingFlags[parsingFlag]:
            raise Exception('Missing operand after "{}"'.format(sys.argv[-1]))

def checkSettings(programSettings: Dict[str, Any]) -> None:
    '''Summary:
        Performs a check of the program settings. If an error is detected, this
        function will throw an exception with the error message as argument.

    Args:
        - programSettings: The program settings object.

    Exceptions:
        - Exception if an error is detected in the program settings.
    '''

    # Check the value of target
    if programSettings['target'] not in (
        'x86-elf-multiboot',
        'x86-aout-multiboot',
        'x86-aout-none'
    ):
        raise Exception('Unknown target: "{}"'.format(programSettings['target']))

def parseTarget(programSettings: Dict[str, Any]) -> None:
    '''Summary:
        Parses the target triplet and defines target-specific build settings.

    Args:
        - programSettings: The program settings object.

    Exceptions:
        - Exception if an error is detected in the program settings.
    '''

    targetTriplet = programSettings['target'].split('-')

    programSettings['architecture'] = targetTriplet[0]

    if targetTriplet[0] == 'x86':
        programSettings['kernel_as'] = 'nasm'
        programSettings['kernel_cc'] = 'i686-elf-gcc'
        programSettings['kernel_ld'] = 'i686-elf-gcc'
        programSettings['kernel_asflags'] = '-f elf -g -F dwarf'
        programSettings['kernel_cflags'] = '-c -W -Wall -Wextra -std=gnu17 -fno-builtin -nostdlib -g -O0 -ffreestanding -mgeneral-regs-only'
        programSettings['kernel_ldflags'] = '-fno-builtin -nostdlib -ffreestanding -g -O0 -lgcc'
        programSettings['kernel_ar'] = 'i686-elf-ar'

    else:
        raise Exception('Unknown architecture "{}".'.format(targetTriplet[0]))

    programSettings['bootstrap'] = targetTriplet[2]

def writeConfig(programSettings: Dict[str, Any]) -> None:
    '''Summary:
        Writes the configuration to Makefile.config.

    Args:
        - programSettings: The program settings object.

    Exceptions:
        - Exception if an error occurs while writing in the file.
    '''

    fd = open('Makefile.config', 'w', encoding='utf-8')

    configurationLines: List[str] = [
        'TARGET={}'.format(programSettings['target']),
        'ARCHITECTURE={}'.format(programSettings['architecture']),
        'BOOTSTRAP={}'.format(programSettings['bootstrap']),
        'KERNEL_AS={}'.format(programSettings['kernel_as']),
        'KERNEL_CC={}'.format(programSettings['kernel_cc']),
        'KERNEL_LD={}'.format(programSettings['kernel_ld']),
        'KERNEL_ASFLAGS={}'.format(programSettings['kernel_asflags']),
        'KERNEL_CFLAGS={}'.format(programSettings['kernel_cflags']),
        'KERNEL_LDFLAGS={}'.format(programSettings['kernel_ldflags']),
        'KERNEL_AR={}'.format(programSettings['kernel_ar'])
    ]

    for configurationLine in configurationLines:
        fd.write(configurationLine + '\n')

    fd.close()

def main() -> None:
    programSettings: Dict[str, Any] = {
        'target': DEFAULT_TARGET,
        'architecture': None,
        'bootstrap': None,
        'kernel_as': None,
        'kernel_cc': None,
        'kernel_ld': None,
        'kernel_asflags': None,
        'kernel_cflags': None,
        'kernel_ldflags': None,
        'kernel_ar': None
    }

    try:
        parseCommandArguments(programSettings)
        checkSettings(programSettings)
        parseTarget(programSettings)
        writeConfig(programSettings)

    except Exception as e:
        print('Error: ' + e.args[0])

main()
