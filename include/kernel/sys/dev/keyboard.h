#ifndef __KERNEL_SYS_DEV_KEYBOARD_H__
#define __KERNEL_SYS_DEV_KEYBOARD_H__

#include <stdbool.h>

enum {
    KEYCODE_INVALID,
    KEYCODE_ESC,
    KEYCODE_F1,
    KEYCODE_F2,
    KEYCODE_F3,
    KEYCODE_F4,
    KEYCODE_F5,
    KEYCODE_F6,
    KEYCODE_F7,
    KEYCODE_F8,
    KEYCODE_F9,
    KEYCODE_F10,
    KEYCODE_F11,
    KEYCODE_F12,
    KEYCODE_PRINTSCREEN,
    KEYCODE_SCROLLLOCK,
    KEYCODE_PAUSE,
    KEYCODE_BACKTICK,
    KEYCODE_1,
    KEYCODE_2,
    KEYCODE_3,
    KEYCODE_4,
    KEYCODE_5,
    KEYCODE_6,
    KEYCODE_7,
    KEYCODE_8,
    KEYCODE_9,
    KEYCODE_0,
    KEYCODE_MINUS,
    KEYCODE_EQUAL,
    KEYCODE_BACKSPACE,
    KEYCODE_INSERT,
    KEYCODE_HOME,
    KEYCODE_PAGEUP,
    KEYCODE_NUMLOCK,
    KEYCODE_KPDIVIDE,
    KEYCODE_KPMULTIPLY,
    KEYCODE_KPMINUS,
    KEYCODE_TAB,
    KEYCODE_Q,
    KEYCODE_W,
    KEYCODE_E,
    KEYCODE_R,
    KEYCODE_T,
    KEYCODE_Y,
    KEYCODE_U,
    KEYCODE_I,
    KEYCODE_O,
    KEYCODE_P,
    KEYCODE_LBRACKET,
    KEYCODE_RBRACKET,
    KEYCODE_BACKSLASH,
    KEYCODE_ENTER,
    KEYCODE_DELETE,
    KEYCODE_END,
    KEYCODE_PAGEDOWN,
    KEYCODE_KP7,
    KEYCODE_KP8,
    KEYCODE_KP9,
    KEYCODE_KPPLUS,
    KEYCODE_CAPSLOCK,
    KEYCODE_A,
    KEYCODE_S,
    KEYCODE_D,
    KEYCODE_F,
    KEYCODE_G,
    KEYCODE_H,
    KEYCODE_J,
    KEYCODE_K,
    KEYCODE_L,
    KEYCODE_SEMICOLON,
    KEYCODE_APOSTROPHE,
    KEYCODE_KP4,
    KEYCODE_KP5,
    KEYCODE_KP6,
    KEYCODE_LSHIFT,
    KEYCODE_INTERNATIONAL,
    KEYCODE_Z,
    KEYCODE_X,
    KEYCODE_C,
    KEYCODE_V,
    KEYCODE_B,
    KEYCODE_N,
    KEYCODE_M,
    KEYCODE_COMMA,
    KEYCODE_DOT,
    KEYCODE_SLASH,
    KEYCODE_RSHIFT,
    KEYCODE_UP,
    KEYCODE_KP1,
    KEYCODE_KP2,
    KEYCODE_KP3,
    KEYCODE_KPENTER,
    KEYCODE_LCTRL,
    KEYCODE_LLOGO,
    KEYCODE_LALT,
    KEYCODE_SPACE,
    KEYCODE_RALT,
    KEYCODE_RLOGO,
    KEYCODE_RMENU,
    KEYCODE_RCTRL,
    KEYCODE_LEFT,
    KEYCODE_DOWN,
    KEYCODE_RIGHT,
    KEYCODE_KP0,
    KEYCODE_KPPOINT
};

enum {
    KEYBOARD_LED_NUMLOCK,
    KEYBOARD_LED_CAPSLOCK,
    KEYBOARD_LED_SCROLLLOCK
};

typedef struct keyboard_driver_s {
    void (*setLeds)(struct keyboard_driver_s *driver, int leds);
} keyboard_driver_t;

void keyboard_driver_register(keyboard_driver_t *driver);
void keyboard_driver_input(keyboard_driver_t *driver, int keycode, bool pressed);

#endif
